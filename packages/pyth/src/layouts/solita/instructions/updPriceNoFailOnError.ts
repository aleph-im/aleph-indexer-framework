/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category UpdPriceNoFailOnError
 * @category generated
 */
export type UpdPriceNoFailOnErrorInstructionArgs = {
  status_: number
  unused_: number
  price_: beet.bignum
  conf_: beet.bignum
  pub_slot_: beet.bignum
}
/**
 * @category Instructions
 * @category UpdPriceNoFailOnError
 * @category generated
 */
export const updPriceNoFailOnErrorStruct = new beet.BeetArgsStruct<
  UpdPriceNoFailOnErrorInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['status_', beet.u32],
    ['unused_', beet.u32],
    ['price_', beet.i64],
    ['conf_', beet.u64],
    ['pub_slot_', beet.u64],
  ],
  'UpdPriceNoFailOnErrorInstructionArgs',
)
/**
 * Accounts required by the _updPriceNoFailOnError_ instruction
 *
 * @property [_writable_, **signer**] funding_account
 * @property [_writable_] price_account
 * @property [] clock_account
 * @category Instructions
 * @category UpdPriceNoFailOnError
 * @category generated
 */
export type UpdPriceNoFailOnErrorInstructionAccounts = {
  funding_account: web3.PublicKey
  price_account: web3.PublicKey
  clock_account: web3.PublicKey
}

export const UpdPriceNoFailOnErrorAccounts = [
  'funding_account',
  'price_account',
  'clock_account',
]

export const updPriceNoFailOnErrorInstructionDiscriminator = [
  2, 0, 0, 0, 13, 0, 0, 0,
]

export type UpdPriceNoFailOnErrorInstruction = {
  programId: web3.PublicKey
  keys: web3.AccountMeta[]
  data: Buffer
}

/**
 * Creates a _UpdPriceNoFailOnError_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdPriceNoFailOnError
 * @category generated
 */
export function createUpdPriceNoFailOnErrorInstruction(
  accounts: UpdPriceNoFailOnErrorInstructionAccounts,
  args: UpdPriceNoFailOnErrorInstructionArgs,
): UpdPriceNoFailOnErrorInstruction {
  const { funding_account, price_account, clock_account } = accounts

  const [data] = updPriceNoFailOnErrorStruct.serialize({
    instructionDiscriminator: updPriceNoFailOnErrorInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: funding_account,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: price_account,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: clock_account,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix: UpdPriceNoFailOnErrorInstruction = new web3.TransactionInstruction({
    programId: new web3.PublicKey('NONE'),
    keys,
    data,
  })
  return ix
}
