/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category InitMapping
 * @category generated
 */
export const initMappingStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'InitMappingInstructionArgs',
)
/**
 * Accounts required by the _initMapping_ instruction
 *
 * @property [_writable_, **signer**] funding_account
 * @property [_writable_, **signer**] fresh_mapping_account
 * @category Instructions
 * @category InitMapping
 * @category generated
 */
export type InitMappingInstructionAccounts = {
  funding_account: web3.PublicKey
  fresh_mapping_account: web3.PublicKey
}

export const InitMappingAccounts = ['funding_account', 'fresh_mapping_account']

export const initMappingInstructionDiscriminator = [2, 0, 0, 0, 0, 0, 0, 0]

export type InitMappingInstruction = {
  programId: web3.PublicKey
  keys: web3.AccountMeta[]
  data: Buffer
}

/**
 * Creates a _InitMapping_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category InitMapping
 * @category generated
 */
export function createInitMappingInstruction(
  accounts: InitMappingInstructionAccounts,
): InitMappingInstruction {
  const { funding_account, fresh_mapping_account } = accounts

  const [data] = initMappingStruct.serialize({
    instructionDiscriminator: initMappingInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: funding_account,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: fresh_mapping_account,
      isWritable: true,
      isSigner: true,
    },
  ]

  const ix: InitMappingInstruction = new web3.TransactionInstruction({
    programId: new web3.PublicKey('NONE'),
    keys,
    data,
  })
  return ix
}
