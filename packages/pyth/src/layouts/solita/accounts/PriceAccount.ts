/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { AccountHeader, accountHeaderBeet } from '../types/AccountHeader.js'
import { PriceEma, priceEmaBeet } from '../types/PriceEma.js'
import { PriceComponent, priceComponentBeet } from '../types/PriceComponent.js'
import { PriceInfo, priceInfoBeet } from '../types/PriceInfo.js'

/**
 * Arguments used to create {@link PriceAccount}
 * @category Accounts
 * @category generated
 */
export type PriceAccountArgs = {
  header: AccountHeader
  priceType: number
  exponent: number
  numComponentPrices: number
  numQuoters: number
  lastSlot: beet.bignum
  validSlot: beet.bignum
  emaPrice: PriceEma
  emaConfidence: PriceEma
  timestamp: beet.bignum
  minPublishers: number
  drv2: number
  drv3: number
  drv4: number
  productAccountKey: web3.PublicKey
  nextPriceAccountKey: web3.PublicKey
  previousSlot: beet.bignum
  previousPrice: beet.bignum
  previousConfidence: beet.bignum
  previousTimestamp: beet.bignum
  priceComponents: PriceComponent[] /* size: 32 */
  aggregate: PriceInfo
}

export const priceAccountDiscriminator = '3'
/**
 * Holds the data for the {@link PriceAccount} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class PriceAccount implements PriceAccountArgs {
  private constructor(
    readonly header: AccountHeader,
    readonly priceType: number,
    readonly exponent: number,
    readonly numComponentPrices: number,
    readonly numQuoters: number,
    readonly lastSlot: beet.bignum,
    readonly validSlot: beet.bignum,
    readonly emaPrice: PriceEma,
    readonly emaConfidence: PriceEma,
    readonly timestamp: beet.bignum,
    readonly minPublishers: number,
    readonly drv2: number,
    readonly drv3: number,
    readonly drv4: number,
    readonly productAccountKey: web3.PublicKey,
    readonly nextPriceAccountKey: web3.PublicKey,
    readonly previousSlot: beet.bignum,
    readonly previousPrice: beet.bignum,
    readonly previousConfidence: beet.bignum,
    readonly previousTimestamp: beet.bignum,
    readonly priceComponents: PriceComponent[] /* size: 32 */,
    readonly aggregate: PriceInfo,
  ) {}

  /**
   * Creates a {@link PriceAccount} instance from the provided args.
   */
  static fromArgs(args: PriceAccountArgs) {
    return new PriceAccount(
      args.header,
      args.priceType,
      args.exponent,
      args.numComponentPrices,
      args.numQuoters,
      args.lastSlot,
      args.validSlot,
      args.emaPrice,
      args.emaConfidence,
      args.timestamp,
      args.minPublishers,
      args.drv2,
      args.drv3,
      args.drv4,
      args.productAccountKey,
      args.nextPriceAccountKey,
      args.previousSlot,
      args.previousPrice,
      args.previousConfidence,
      args.previousTimestamp,
      args.priceComponents,
      args.aggregate,
    )
  }

  /**
   * Deserializes the {@link PriceAccount} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [PriceAccount, number] {
    return PriceAccount.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link PriceAccount} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<PriceAccount> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find PriceAccount account at ${address}`)
    }
    return PriceAccount.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'FsJ3A3u2vn5cTVofAjvy6y5kwABJAqYWpe4975bi2epH',
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, priceAccountBeet)
  }

  /**
   * Deserializes the {@link PriceAccount} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [PriceAccount, number] {
    return priceAccountBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link PriceAccount} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return priceAccountBeet.serialize({
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link PriceAccount}
   */
  static get byteSize() {
    return priceAccountBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link PriceAccount} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      PriceAccount.byteSize,
      commitment,
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link PriceAccount} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === PriceAccount.byteSize
  }

  /**
   * Returns a readable version of {@link PriceAccount} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      header: this.header,
      priceType: this.priceType,
      exponent: this.exponent,
      numComponentPrices: this.numComponentPrices,
      numQuoters: this.numQuoters,
      lastSlot: (() => {
        const x = <{ toNumber: () => number }>this.lastSlot
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      validSlot: (() => {
        const x = <{ toNumber: () => number }>this.validSlot
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      emaPrice: this.emaPrice,
      emaConfidence: this.emaConfidence,
      timestamp: (() => {
        const x = <{ toNumber: () => number }>this.timestamp
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      minPublishers: this.minPublishers,
      drv2: this.drv2,
      drv3: this.drv3,
      drv4: this.drv4,
      productAccountKey: this.productAccountKey.toBase58(),
      nextPriceAccountKey: this.nextPriceAccountKey.toBase58(),
      previousSlot: (() => {
        const x = <{ toNumber: () => number }>this.previousSlot
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      previousPrice: (() => {
        const x = <{ toNumber: () => number }>this.previousPrice
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      previousConfidence: (() => {
        const x = <{ toNumber: () => number }>this.previousConfidence
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      previousTimestamp: (() => {
        const x = <{ toNumber: () => number }>this.previousTimestamp
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      priceComponents: this.priceComponents,
      aggregate: this.aggregate,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const priceAccountBeet = new beet.BeetStruct<
  PriceAccount,
  PriceAccountArgs
>(
  [
    ['header', accountHeaderBeet],
    ['priceType', beet.u32],
    ['exponent', beet.i32],
    ['numComponentPrices', beet.u32],
    ['numQuoters', beet.u32],
    ['lastSlot', beet.u64],
    ['validSlot', beet.u64],
    ['emaPrice', priceEmaBeet],
    ['emaConfidence', priceEmaBeet],
    ['timestamp', beet.i64],
    ['minPublishers', beet.u8],
    ['drv2', beet.i8],
    ['drv3', beet.i16],
    ['drv4', beet.i32],
    ['productAccountKey', beetSolana.publicKey],
    ['nextPriceAccountKey', beetSolana.publicKey],
    ['previousSlot', beet.u64],
    ['previousPrice', beet.i64],
    ['previousConfidence', beet.u64],
    ['previousTimestamp', beet.i64],
    ['priceComponents', beet.uniformFixedSizeArray(priceComponentBeet, 32)],
    ['aggregate', priceInfoBeet],
  ],
  PriceAccount.fromArgs,
  'PriceAccount',
)
