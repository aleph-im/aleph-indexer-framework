/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CreateToken
 * @category generated
 */
export type CreateTokenInstructionArgs = {
  offChainId: string
  offChainId2: string
  offChainMetadata: string
  refundTimespan: beet.bignum
  tokenPrice: number
  exemplars: number
  tokenName: string
  tokenSymbol: string
  tokenUri: string
}
/**
 * @category Instructions
 * @category CreateToken
 * @category generated
 */
export const createTokenStruct = new beet.FixableBeetArgsStruct<
  CreateTokenInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['offChainId', beet.utf8String],
    ['offChainId2', beet.utf8String],
    ['offChainMetadata', beet.utf8String],
    ['refundTimespan', beet.u64],
    ['tokenPrice', beet.u32],
    ['exemplars', beet.i32],
    ['tokenName', beet.utf8String],
    ['tokenSymbol', beet.utf8String],
    ['tokenUri', beet.utf8String],
  ],
  'CreateTokenInstructionArgs',
)
/**
 * Accounts required by the _createToken_ instruction
 *
 * @property [] metadataProgram
 * @property [_writable_, **signer**] authority
 * @property [] app
 * @property [_writable_] tokenMint
 * @property [_writable_] token
 * @property [] acceptedMint
 * @property [_writable_] tokenMetadata
 * @category Instructions
 * @category CreateToken
 * @category generated
 */
export type CreateTokenInstructionAccounts = {
  metadataProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  rent?: web3.PublicKey
  authority: web3.PublicKey
  app: web3.PublicKey
  tokenMint: web3.PublicKey
  token: web3.PublicKey
  acceptedMint: web3.PublicKey
  tokenMetadata: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createTokenInstructionDiscriminator = [
  84, 52, 204, 228, 24, 140, 234, 75,
]

/**
 * Creates a _CreateToken_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateToken
 * @category generated
 */
export function createCreateTokenInstruction(
  accounts: CreateTokenInstructionAccounts,
  args: CreateTokenInstructionArgs,
  programId = new web3.PublicKey(
    'BrickarF2QeREBZsapbhgYPHJi5FYkJVnx7mZhxETCt5',
  ),
) {
  const [data] = createTokenStruct.serialize({
    instructionDiscriminator: createTokenInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.metadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.app,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.token,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.acceptedMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMetadata,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
