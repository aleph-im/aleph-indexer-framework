/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CreateApp
 * @category generated
 */
export type CreateAppInstructionArgs = {
  appName: string
  feeBasisPoints: number
}
/**
 * @category Instructions
 * @category CreateApp
 * @category generated
 */
export const createAppStruct = new beet.FixableBeetArgsStruct<
  CreateAppInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['appName', beet.utf8String],
    ['feeBasisPoints', beet.u16],
  ],
  'CreateAppInstructionArgs',
)
/**
 * Accounts required by the _createApp_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [_writable_] app
 * @category Instructions
 * @category CreateApp
 * @category generated
 */
export type CreateAppInstructionAccounts = {
  systemProgram?: web3.PublicKey
  rent?: web3.PublicKey
  authority: web3.PublicKey
  app: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createAppInstructionDiscriminator = [
  165, 212, 136, 33, 249, 223, 246, 249,
]

/**
 * Creates a _CreateApp_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateApp
 * @category generated
 */
export function createCreateAppInstruction(
  accounts: CreateAppInstructionAccounts,
  args: CreateAppInstructionArgs,
  programId = new web3.PublicKey(
    'BrickarF2QeREBZsapbhgYPHJi5FYkJVnx7mZhxETCt5',
  ),
) {
  const [data] = createAppStruct.serialize({
    instructionDiscriminator: createAppInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.app,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
