/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { SellerConfig, sellerConfigBeet } from '../types/SellerConfig.js'
import {
  TransactionsInfo,
  transactionsInfoBeet,
} from '../types/TransactionsInfo.js'
import { Bumps, bumpsBeet } from '../types/Bumps.js'

/**
 * Arguments used to create {@link TokenMetadata}
 * @category Accounts
 * @category generated
 */
export type TokenMetadataArgs = {
  offChainMetadata: number[] /* size: 64 */
  app: web3.PublicKey
  tokenMint: web3.PublicKey
  authority: web3.PublicKey
  sellerConfig: SellerConfig
  transactionsInfo: TransactionsInfo
  bumps: Bumps
  offChainId2: number[] /* size: 32 */
  offChainId: string
}

export const tokenMetadataDiscriminator = [
  237, 215, 132, 182, 24, 127, 175, 173,
]
/**
 * Holds the data for the {@link TokenMetadata} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class TokenMetadata implements TokenMetadataArgs {
  private constructor(
    readonly offChainMetadata: number[] /* size: 64 */,
    readonly app: web3.PublicKey,
    readonly tokenMint: web3.PublicKey,
    readonly authority: web3.PublicKey,
    readonly sellerConfig: SellerConfig,
    readonly transactionsInfo: TransactionsInfo,
    readonly bumps: Bumps,
    readonly offChainId2: number[] /* size: 32 */,
    readonly offChainId: string,
  ) {}

  /**
   * Creates a {@link TokenMetadata} instance from the provided args.
   */
  static fromArgs(args: TokenMetadataArgs) {
    return new TokenMetadata(
      args.offChainMetadata,
      args.app,
      args.tokenMint,
      args.authority,
      args.sellerConfig,
      args.transactionsInfo,
      args.bumps,
      args.offChainId2,
      args.offChainId,
    )
  }

  /**
   * Deserializes the {@link TokenMetadata} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [TokenMetadata, number] {
    return TokenMetadata.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link TokenMetadata} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<TokenMetadata> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find TokenMetadata account at ${address}`)
    }
    return TokenMetadata.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'BrickarF2QeREBZsapbhgYPHJi5FYkJVnx7mZhxETCt5',
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, tokenMetadataBeet)
  }

  /**
   * Deserializes the {@link TokenMetadata} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [TokenMetadata, number] {
    return tokenMetadataBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link TokenMetadata} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return tokenMetadataBeet.serialize({
      accountDiscriminator: tokenMetadataDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link TokenMetadata} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: TokenMetadataArgs) {
    const instance = TokenMetadata.fromArgs(args)
    return tokenMetadataBeet.toFixedFromValue({
      accountDiscriminator: tokenMetadataDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link TokenMetadata} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: TokenMetadataArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      TokenMetadata.byteSize(args),
      commitment,
    )
  }

  /**
   * Returns a readable version of {@link TokenMetadata} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      offChainMetadata: this.offChainMetadata,
      app: this.app.toBase58(),
      tokenMint: this.tokenMint.toBase58(),
      authority: this.authority.toBase58(),
      sellerConfig: this.sellerConfig,
      transactionsInfo: this.transactionsInfo,
      bumps: this.bumps,
      offChainId2: this.offChainId2,
      offChainId: this.offChainId,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const tokenMetadataBeet = new beet.FixableBeetStruct<
  TokenMetadata,
  TokenMetadataArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['offChainMetadata', beet.uniformFixedSizeArray(beet.u8, 64)],
    ['app', beetSolana.publicKey],
    ['tokenMint', beetSolana.publicKey],
    ['authority', beetSolana.publicKey],
    ['sellerConfig', sellerConfigBeet],
    ['transactionsInfo', transactionsInfoBeet],
    ['bumps', bumpsBeet],
    ['offChainId2', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['offChainId', beet.utf8String],
  ],
  TokenMetadata.fromArgs,
  'TokenMetadata',
)
