/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * WrongReserveOwner: 'Wrong reserve owner. Must be a system account'
 *
 * @category Errors
 * @category generated
 */
export class WrongReserveOwnerError extends Error {
  readonly code: number = 0x12c
  readonly name: string = 'WrongReserveOwner'
  constructor() {
    super('Wrong reserve owner. Must be a system account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongReserveOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x12c, () => new WrongReserveOwnerError())
createErrorFromNameLookup.set(
  'WrongReserveOwner',
  () => new WrongReserveOwnerError(),
)

/**
 * NonEmptyReserveData: 'Reserve must have no data, but has data'
 *
 * @category Errors
 * @category generated
 */
export class NonEmptyReserveDataError extends Error {
  readonly code: number = 0x12d
  readonly name: string = 'NonEmptyReserveData'
  constructor() {
    super('Reserve must have no data, but has data')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NonEmptyReserveDataError)
    }
  }
}

createErrorFromCodeLookup.set(0x12d, () => new NonEmptyReserveDataError())
createErrorFromNameLookup.set(
  'NonEmptyReserveData',
  () => new NonEmptyReserveDataError(),
)

/**
 * InvalidInitialReserveLamports: 'Invalid initial reserve lamports'
 *
 * @category Errors
 * @category generated
 */
export class InvalidInitialReserveLamportsError extends Error {
  readonly code: number = 0x12e
  readonly name: string = 'InvalidInitialReserveLamports'
  constructor() {
    super('Invalid initial reserve lamports')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidInitialReserveLamportsError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x12e,
  () => new InvalidInitialReserveLamportsError(),
)
createErrorFromNameLookup.set(
  'InvalidInitialReserveLamports',
  () => new InvalidInitialReserveLamportsError(),
)

/**
 * ZeroValidatorChunkSize: 'Zero validator chunk size'
 *
 * @category Errors
 * @category generated
 */
export class ZeroValidatorChunkSizeError extends Error {
  readonly code: number = 0x12f
  readonly name: string = 'ZeroValidatorChunkSize'
  constructor() {
    super('Zero validator chunk size')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ZeroValidatorChunkSizeError)
    }
  }
}

createErrorFromCodeLookup.set(0x12f, () => new ZeroValidatorChunkSizeError())
createErrorFromNameLookup.set(
  'ZeroValidatorChunkSize',
  () => new ZeroValidatorChunkSizeError(),
)

/**
 * TooBigValidatorChunkSize: 'Too big validator chunk size'
 *
 * @category Errors
 * @category generated
 */
export class TooBigValidatorChunkSizeError extends Error {
  readonly code: number = 0x130
  readonly name: string = 'TooBigValidatorChunkSize'
  constructor() {
    super('Too big validator chunk size')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TooBigValidatorChunkSizeError)
    }
  }
}

createErrorFromCodeLookup.set(0x130, () => new TooBigValidatorChunkSizeError())
createErrorFromNameLookup.set(
  'TooBigValidatorChunkSize',
  () => new TooBigValidatorChunkSizeError(),
)

/**
 * ZeroCreditChunkSize: 'Zero credit chunk size'
 *
 * @category Errors
 * @category generated
 */
export class ZeroCreditChunkSizeError extends Error {
  readonly code: number = 0x131
  readonly name: string = 'ZeroCreditChunkSize'
  constructor() {
    super('Zero credit chunk size')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ZeroCreditChunkSizeError)
    }
  }
}

createErrorFromCodeLookup.set(0x131, () => new ZeroCreditChunkSizeError())
createErrorFromNameLookup.set(
  'ZeroCreditChunkSize',
  () => new ZeroCreditChunkSizeError(),
)

/**
 * TooBigCreditChunkSize: 'Too big credit chunk size'
 *
 * @category Errors
 * @category generated
 */
export class TooBigCreditChunkSizeError extends Error {
  readonly code: number = 0x132
  readonly name: string = 'TooBigCreditChunkSize'
  constructor() {
    super('Too big credit chunk size')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TooBigCreditChunkSizeError)
    }
  }
}

createErrorFromCodeLookup.set(0x132, () => new TooBigCreditChunkSizeError())
createErrorFromNameLookup.set(
  'TooBigCreditChunkSize',
  () => new TooBigCreditChunkSizeError(),
)

/**
 * TooLowCreditFee: 'Too low credit fee'
 *
 * @category Errors
 * @category generated
 */
export class TooLowCreditFeeError extends Error {
  readonly code: number = 0x133
  readonly name: string = 'TooLowCreditFee'
  constructor() {
    super('Too low credit fee')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TooLowCreditFeeError)
    }
  }
}

createErrorFromCodeLookup.set(0x133, () => new TooLowCreditFeeError())
createErrorFromNameLookup.set(
  'TooLowCreditFee',
  () => new TooLowCreditFeeError(),
)

/**
 * InvalidMintAuthority: 'Invalid mint authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintAuthorityError extends Error {
  readonly code: number = 0x134
  readonly name: string = 'InvalidMintAuthority'
  constructor() {
    super('Invalid mint authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x134, () => new InvalidMintAuthorityError())
createErrorFromNameLookup.set(
  'InvalidMintAuthority',
  () => new InvalidMintAuthorityError(),
)

/**
 * MintHasInitialSupply: 'Non empty initial mint supply'
 *
 * @category Errors
 * @category generated
 */
export class MintHasInitialSupplyError extends Error {
  readonly code: number = 0x135
  readonly name: string = 'MintHasInitialSupply'
  constructor() {
    super('Non empty initial mint supply')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MintHasInitialSupplyError)
    }
  }
}

createErrorFromCodeLookup.set(0x135, () => new MintHasInitialSupplyError())
createErrorFromNameLookup.set(
  'MintHasInitialSupply',
  () => new MintHasInitialSupplyError(),
)

/**
 * InvalidOwnerFeeState: 'Invalid owner fee state'
 *
 * @category Errors
 * @category generated
 */
export class InvalidOwnerFeeStateError extends Error {
  readonly code: number = 0x136
  readonly name: string = 'InvalidOwnerFeeState'
  constructor() {
    super('Invalid owner fee state')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidOwnerFeeStateError)
    }
  }
}

createErrorFromCodeLookup.set(0x136, () => new InvalidOwnerFeeStateError())
createErrorFromNameLookup.set(
  'InvalidOwnerFeeState',
  () => new InvalidOwnerFeeStateError(),
)

/**
 * InvalidProgramId: '1910 Invalid program id. For using program from another account please update id in the code'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProgramIdError extends Error {
  readonly code: number = 0x1910
  readonly name: string = 'InvalidProgramId'
  constructor() {
    super(
      '1910 Invalid program id. For using program from another account please update id in the code',
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidProgramIdError)
    }
  }
}

createErrorFromCodeLookup.set(0x1910, () => new InvalidProgramIdError())
createErrorFromNameLookup.set(
  'InvalidProgramId',
  () => new InvalidProgramIdError(),
)

/**
 * UnexpectedAccount: 'FFA0 Unexpected account'
 *
 * @category Errors
 * @category generated
 */
export class UnexpectedAccountError extends Error {
  readonly code: number = 0xffa0
  readonly name: string = 'UnexpectedAccount'
  constructor() {
    super('FFA0 Unexpected account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnexpectedAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0xffa0, () => new UnexpectedAccountError())
createErrorFromNameLookup.set(
  'UnexpectedAccount',
  () => new UnexpectedAccountError(),
)

/**
 * CalculationFailure: 'CACF Calculation failure'
 *
 * @category Errors
 * @category generated
 */
export class CalculationFailureError extends Error {
  readonly code: number = 0xcacf
  readonly name: string = 'CalculationFailure'
  constructor() {
    super('CACF Calculation failure')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CalculationFailureError)
    }
  }
}

createErrorFromCodeLookup.set(0xcacf, () => new CalculationFailureError())
createErrorFromNameLookup.set(
  'CalculationFailure',
  () => new CalculationFailureError(),
)

/**
 * AccountWithLockup: 'B3AA You can't deposit a stake-account with lockup'
 *
 * @category Errors
 * @category generated
 */
export class AccountWithLockupError extends Error {
  readonly code: number = 0xb3aa
  readonly name: string = 'AccountWithLockup'
  constructor() {
    super("B3AA You can't deposit a stake-account with lockup")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AccountWithLockupError)
    }
  }
}

createErrorFromCodeLookup.set(0xb3aa, () => new AccountWithLockupError())
createErrorFromNameLookup.set(
  'AccountWithLockup',
  () => new AccountWithLockupError(),
)

/**
 * NumberTooLow: '2000 Number too low'
 *
 * @category Errors
 * @category generated
 */
export class NumberTooLowError extends Error {
  readonly code: number = 0x2000
  readonly name: string = 'NumberTooLow'
  constructor() {
    super('2000 Number too low')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NumberTooLowError)
    }
  }
}

createErrorFromCodeLookup.set(0x2000, () => new NumberTooLowError())
createErrorFromNameLookup.set('NumberTooLow', () => new NumberTooLowError())

/**
 * NumberTooHigh: '2001 Number too high'
 *
 * @category Errors
 * @category generated
 */
export class NumberTooHighError extends Error {
  readonly code: number = 0x2001
  readonly name: string = 'NumberTooHigh'
  constructor() {
    super('2001 Number too high')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NumberTooHighError)
    }
  }
}

createErrorFromCodeLookup.set(0x2001, () => new NumberTooHighError())
createErrorFromNameLookup.set('NumberTooHigh', () => new NumberTooHighError())

/**
 * FeeTooHigh: '1100 Fee too high'
 *
 * @category Errors
 * @category generated
 */
export class FeeTooHighError extends Error {
  readonly code: number = 0x1100
  readonly name: string = 'FeeTooHigh'
  constructor() {
    super('1100 Fee too high')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FeeTooHighError)
    }
  }
}

createErrorFromCodeLookup.set(0x1100, () => new FeeTooHighError())
createErrorFromNameLookup.set('FeeTooHigh', () => new FeeTooHighError())

/**
 * FeesWrongWayRound: '1101 Min fee > max fee'
 *
 * @category Errors
 * @category generated
 */
export class FeesWrongWayRoundError extends Error {
  readonly code: number = 0x1101
  readonly name: string = 'FeesWrongWayRound'
  constructor() {
    super('1101 Min fee > max fee')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FeesWrongWayRoundError)
    }
  }
}

createErrorFromCodeLookup.set(0x1101, () => new FeesWrongWayRoundError())
createErrorFromNameLookup.set(
  'FeesWrongWayRound',
  () => new FeesWrongWayRoundError(),
)

/**
 * LiquidityTargetTooLow: '1102 Liquidity target too low'
 *
 * @category Errors
 * @category generated
 */
export class LiquidityTargetTooLowError extends Error {
  readonly code: number = 0x1102
  readonly name: string = 'LiquidityTargetTooLow'
  constructor() {
    super('1102 Liquidity target too low')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, LiquidityTargetTooLowError)
    }
  }
}

createErrorFromCodeLookup.set(0x1102, () => new LiquidityTargetTooLowError())
createErrorFromNameLookup.set(
  'LiquidityTargetTooLow',
  () => new LiquidityTargetTooLowError(),
)

/**
 * TicketNotDue: '1103 Ticket not due. Wait more epochs'
 *
 * @category Errors
 * @category generated
 */
export class TicketNotDueError extends Error {
  readonly code: number = 0x1103
  readonly name: string = 'TicketNotDue'
  constructor() {
    super('1103 Ticket not due. Wait more epochs')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TicketNotDueError)
    }
  }
}

createErrorFromCodeLookup.set(0x1103, () => new TicketNotDueError())
createErrorFromNameLookup.set('TicketNotDue', () => new TicketNotDueError())

/**
 * TicketNotReady: '1104 Ticket not ready. Wait a few hours and try again'
 *
 * @category Errors
 * @category generated
 */
export class TicketNotReadyError extends Error {
  readonly code: number = 0x1104
  readonly name: string = 'TicketNotReady'
  constructor() {
    super('1104 Ticket not ready. Wait a few hours and try again')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TicketNotReadyError)
    }
  }
}

createErrorFromCodeLookup.set(0x1104, () => new TicketNotReadyError())
createErrorFromNameLookup.set('TicketNotReady', () => new TicketNotReadyError())

/**
 * WrongBeneficiary: '1105 Wrong Ticket Beneficiary'
 *
 * @category Errors
 * @category generated
 */
export class WrongBeneficiaryError extends Error {
  readonly code: number = 0x1105
  readonly name: string = 'WrongBeneficiary'
  constructor() {
    super('1105 Wrong Ticket Beneficiary')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongBeneficiaryError)
    }
  }
}

createErrorFromCodeLookup.set(0x1105, () => new WrongBeneficiaryError())
createErrorFromNameLookup.set(
  'WrongBeneficiary',
  () => new WrongBeneficiaryError(),
)

/**
 * StakeAccountNotUpdatedYet: '1106 Stake Account not updated yet'
 *
 * @category Errors
 * @category generated
 */
export class StakeAccountNotUpdatedYetError extends Error {
  readonly code: number = 0x1106
  readonly name: string = 'StakeAccountNotUpdatedYet'
  constructor() {
    super('1106 Stake Account not updated yet')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakeAccountNotUpdatedYetError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1106,
  () => new StakeAccountNotUpdatedYetError(),
)
createErrorFromNameLookup.set(
  'StakeAccountNotUpdatedYet',
  () => new StakeAccountNotUpdatedYetError(),
)

/**
 * StakeNotDelegated: '1107 Stake Account not delegated'
 *
 * @category Errors
 * @category generated
 */
export class StakeNotDelegatedError extends Error {
  readonly code: number = 0x1107
  readonly name: string = 'StakeNotDelegated'
  constructor() {
    super('1107 Stake Account not delegated')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakeNotDelegatedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1107, () => new StakeNotDelegatedError())
createErrorFromNameLookup.set(
  'StakeNotDelegated',
  () => new StakeNotDelegatedError(),
)

/**
 * StakeAccountIsEmergencyUnstaking: '1108 Stake Account is emergency unstaking'
 *
 * @category Errors
 * @category generated
 */
export class StakeAccountIsEmergencyUnstakingError extends Error {
  readonly code: number = 0x1108
  readonly name: string = 'StakeAccountIsEmergencyUnstaking'
  constructor() {
    super('1108 Stake Account is emergency unstaking')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakeAccountIsEmergencyUnstakingError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1108,
  () => new StakeAccountIsEmergencyUnstakingError(),
)
createErrorFromNameLookup.set(
  'StakeAccountIsEmergencyUnstaking',
  () => new StakeAccountIsEmergencyUnstakingError(),
)

/**
 * InsufficientLiquidity: '1199 Insufficient Liquidity in the Liquidity Pool'
 *
 * @category Errors
 * @category generated
 */
export class InsufficientLiquidityError extends Error {
  readonly code: number = 0x1199
  readonly name: string = 'InsufficientLiquidity'
  constructor() {
    super('1199 Insufficient Liquidity in the Liquidity Pool')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InsufficientLiquidityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1199, () => new InsufficientLiquidityError())
createErrorFromNameLookup.set(
  'InsufficientLiquidity',
  () => new InsufficientLiquidityError(),
)

/**
 * InvalidValidator: 'BAD1 Invalid validator'
 *
 * @category Errors
 * @category generated
 */
export class InvalidValidatorError extends Error {
  readonly code: number = 0xbad1
  readonly name: string = 'InvalidValidator'
  constructor() {
    super('BAD1 Invalid validator')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidValidatorError)
    }
  }
}

createErrorFromCodeLookup.set(0xbad1, () => new InvalidValidatorError())
createErrorFromNameLookup.set(
  'InvalidValidator',
  () => new InvalidValidatorError(),
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
