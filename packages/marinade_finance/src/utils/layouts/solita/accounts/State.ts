/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { Fee, feeBeet } from '../types/Fee.js'
import { StakeSystem, stakeSystemBeet } from '../types/StakeSystem.js'
import {
  ValidatorSystem,
  validatorSystemBeet,
} from '../types/ValidatorSystem.js'
import { LiqPool, liqPoolBeet } from '../types/LiqPool.js'

/**
 * Arguments used to create {@link State}
 * @category Accounts
 * @category generated
 */
export type StateArgs = {
  msolMint: web3.PublicKey
  adminAuthority: web3.PublicKey
  operationalSolAccount: web3.PublicKey
  treasuryMsolAccount: web3.PublicKey
  reserveBumpSeed: number
  msolMintAuthorityBumpSeed: number
  rentExemptForTokenAcc: beet.bignum
  rewardFee: Fee
  stakeSystem: StakeSystem
  validatorSystem: ValidatorSystem
  liqPool: LiqPool
  availableReserveBalance: beet.bignum
  msolSupply: beet.bignum
  msolPrice: beet.bignum
  circulatingTicketCount: beet.bignum
  circulatingTicketBalance: beet.bignum
  lentFromReserve: beet.bignum
  minDeposit: beet.bignum
  minWithdraw: beet.bignum
  stakingSolCap: beet.bignum
  emergencyCoolingDown: beet.bignum
}

export const stateDiscriminator = [216, 146, 107, 94, 104, 75, 182, 177]
/**
 * Holds the data for the {@link State} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class State implements StateArgs {
  private constructor(
    readonly msolMint: web3.PublicKey,
    readonly adminAuthority: web3.PublicKey,
    readonly operationalSolAccount: web3.PublicKey,
    readonly treasuryMsolAccount: web3.PublicKey,
    readonly reserveBumpSeed: number,
    readonly msolMintAuthorityBumpSeed: number,
    readonly rentExemptForTokenAcc: beet.bignum,
    readonly rewardFee: Fee,
    readonly stakeSystem: StakeSystem,
    readonly validatorSystem: ValidatorSystem,
    readonly liqPool: LiqPool,
    readonly availableReserveBalance: beet.bignum,
    readonly msolSupply: beet.bignum,
    readonly msolPrice: beet.bignum,
    readonly circulatingTicketCount: beet.bignum,
    readonly circulatingTicketBalance: beet.bignum,
    readonly lentFromReserve: beet.bignum,
    readonly minDeposit: beet.bignum,
    readonly minWithdraw: beet.bignum,
    readonly stakingSolCap: beet.bignum,
    readonly emergencyCoolingDown: beet.bignum,
  ) {}

  /**
   * Creates a {@link State} instance from the provided args.
   */
  static fromArgs(args: StateArgs) {
    return new State(
      args.msolMint,
      args.adminAuthority,
      args.operationalSolAccount,
      args.treasuryMsolAccount,
      args.reserveBumpSeed,
      args.msolMintAuthorityBumpSeed,
      args.rentExemptForTokenAcc,
      args.rewardFee,
      args.stakeSystem,
      args.validatorSystem,
      args.liqPool,
      args.availableReserveBalance,
      args.msolSupply,
      args.msolPrice,
      args.circulatingTicketCount,
      args.circulatingTicketBalance,
      args.lentFromReserve,
      args.minDeposit,
      args.minWithdraw,
      args.stakingSolCap,
      args.emergencyCoolingDown,
    )
  }

  /**
   * Deserializes the {@link State} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [State, number] {
    return State.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link State} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<State> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find State account at ${address}`)
    }
    return State.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Deserializes the {@link State} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [State, number] {
    return stateBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link State} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return stateBeet.serialize({
      accountDiscriminator: stateDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link State}
   */
  static get byteSize() {
    return stateBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link State} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      State.byteSize,
      commitment,
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link State} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === State.byteSize
  }

  /**
   * Returns a readable version of {@link State} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      msolMint: this.msolMint.toBase58(),
      adminAuthority: this.adminAuthority.toBase58(),
      operationalSolAccount: this.operationalSolAccount.toBase58(),
      treasuryMsolAccount: this.treasuryMsolAccount.toBase58(),
      reserveBumpSeed: this.reserveBumpSeed,
      msolMintAuthorityBumpSeed: this.msolMintAuthorityBumpSeed,
      rentExemptForTokenAcc: (() => {
        const x = <{ toNumber: () => number }>this.rentExemptForTokenAcc
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      rewardFee: this.rewardFee,
      stakeSystem: this.stakeSystem,
      validatorSystem: this.validatorSystem,
      liqPool: this.liqPool,
      availableReserveBalance: (() => {
        const x = <{ toNumber: () => number }>this.availableReserveBalance
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      msolSupply: (() => {
        const x = <{ toNumber: () => number }>this.msolSupply
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      msolPrice: (() => {
        const x = <{ toNumber: () => number }>this.msolPrice
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      circulatingTicketCount: (() => {
        const x = <{ toNumber: () => number }>this.circulatingTicketCount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      circulatingTicketBalance: (() => {
        const x = <{ toNumber: () => number }>this.circulatingTicketBalance
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      lentFromReserve: (() => {
        const x = <{ toNumber: () => number }>this.lentFromReserve
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      minDeposit: (() => {
        const x = <{ toNumber: () => number }>this.minDeposit
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      minWithdraw: (() => {
        const x = <{ toNumber: () => number }>this.minWithdraw
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      stakingSolCap: (() => {
        const x = <{ toNumber: () => number }>this.stakingSolCap
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      emergencyCoolingDown: (() => {
        const x = <{ toNumber: () => number }>this.emergencyCoolingDown
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const stateBeet = new beet.BeetStruct<
  State,
  StateArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['msolMint', beetSolana.publicKey],
    ['adminAuthority', beetSolana.publicKey],
    ['operationalSolAccount', beetSolana.publicKey],
    ['treasuryMsolAccount', beetSolana.publicKey],
    ['reserveBumpSeed', beet.u8],
    ['msolMintAuthorityBumpSeed', beet.u8],
    ['rentExemptForTokenAcc', beet.u64],
    ['rewardFee', feeBeet],
    ['stakeSystem', stakeSystemBeet],
    ['validatorSystem', validatorSystemBeet],
    ['liqPool', liqPoolBeet],
    ['availableReserveBalance', beet.u64],
    ['msolSupply', beet.u64],
    ['msolPrice', beet.u64],
    ['circulatingTicketCount', beet.u64],
    ['circulatingTicketBalance', beet.u64],
    ['lentFromReserve', beet.u64],
    ['minDeposit', beet.u64],
    ['minWithdraw', beet.u64],
    ['stakingSolCap', beet.u64],
    ['emergencyCoolingDown', beet.u64],
  ],
  State.fromArgs,
  'State,',
)
