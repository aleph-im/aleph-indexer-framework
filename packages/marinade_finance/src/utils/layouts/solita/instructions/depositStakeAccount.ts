/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category DepositStakeAccount
 * @category generated
 */
export type DepositStakeAccountInstructionArgs = {
  validatorIndex: number
}
/**
 * @category Instructions
 * @category DepositStakeAccount
 * @category generated
 */
export const depositStakeAccountStruct = new beet.BeetArgsStruct<
  DepositStakeAccountInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['validatorIndex', beet.u32],
  ],
  'DepositStakeAccountInstructionArgs',
)
/**
 * Accounts required by the _depositStakeAccount_ instruction
 *
 * @property [_writable_] state
 * @property [_writable_] validatorList
 * @property [_writable_] stakeList
 * @property [_writable_] stakeAccount
 * @property [**signer**] stakeAuthority
 * @property [_writable_] duplicationFlag
 * @property [_writable_, **signer**] rentPayer
 * @property [_writable_] msolMint
 * @property [_writable_] mintTo
 * @property [] msolMintAuthority
 * @property [] clock
 * @property [] stakeProgram
 * @category Instructions
 * @category DepositStakeAccount
 * @category generated
 */
export type DepositStakeAccountInstructionAccounts = {
  state: web3.PublicKey
  validatorList: web3.PublicKey
  stakeList: web3.PublicKey
  stakeAccount: web3.PublicKey
  stakeAuthority: web3.PublicKey
  duplicationFlag: web3.PublicKey
  rentPayer: web3.PublicKey
  msolMint: web3.PublicKey
  mintTo: web3.PublicKey
  msolMintAuthority: web3.PublicKey
  clock: web3.PublicKey
  stakeProgram: web3.PublicKey
}

export const DepositStakeAccountAccounts = [
  'state',
  'validatorList',
  'stakeList',
  'stakeAccount',
  'stakeAuthority',
  'duplicationFlag',
  'rentPayer',
  'msolMint',
  'mintTo',
  'msolMintAuthority',
  'clock',
  'stakeProgram',
]

export const depositStakeAccountInstructionDiscriminator = [
  110, 130, 115, 41, 164, 102, 2, 59,
]

export type DepositStakeAccountInstruction = {
  programId: web3.PublicKey
  keys: web3.AccountMeta[]
  data: Buffer
}

/**
 * Creates a _DepositStakeAccount_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category DepositStakeAccount
 * @category generated
 */
export function createDepositStakeAccountInstruction(
  accounts: DepositStakeAccountInstructionAccounts,
  args: DepositStakeAccountInstructionArgs,
): DepositStakeAccountInstruction {
  const {
    state,
    validatorList,
    stakeList,
    stakeAccount,
    stakeAuthority,
    duplicationFlag,
    rentPayer,
    msolMint,
    mintTo,
    msolMintAuthority,
    clock,
    stakeProgram,
  } = accounts

  const [data] = depositStakeAccountStruct.serialize({
    instructionDiscriminator: depositStakeAccountInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: state,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: validatorList,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: stakeList,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: stakeAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: stakeAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: duplicationFlag,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: rentPayer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: msolMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: mintTo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: msolMintAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: clock,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: stakeProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix: DepositStakeAccountInstruction = new web3.TransactionInstruction({
    programId: new web3.PublicKey('NONE'),
    keys,
    data,
  })
  return ix
}
