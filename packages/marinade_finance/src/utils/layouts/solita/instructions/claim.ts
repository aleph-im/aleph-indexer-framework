/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Claim
 * @category generated
 */
export const claimStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ClaimInstructionArgs',
)
/**
 * Accounts required by the _claim_ instruction
 *
 * @property [_writable_] state
 * @property [_writable_] reservePda
 * @property [_writable_] ticketAccount
 * @property [_writable_] transferSolTo
 * @property [] clock
 * @category Instructions
 * @category Claim
 * @category generated
 */
export type ClaimInstructionAccounts = {
  state: web3.PublicKey
  reservePda: web3.PublicKey
  ticketAccount: web3.PublicKey
  transferSolTo: web3.PublicKey
  clock: web3.PublicKey
}

export const ClaimAccounts = [
  'state',
  'reservePda',
  'ticketAccount',
  'transferSolTo',
  'clock',
]

export const claimInstructionDiscriminator = [
  62, 198, 214, 193, 213, 159, 108, 210,
]

export type ClaimInstruction = {
  programId: web3.PublicKey
  keys: web3.AccountMeta[]
  data: Buffer
}

/**
 * Creates a _Claim_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category Claim
 * @category generated
 */
export function createClaimInstruction(
  accounts: ClaimInstructionAccounts,
): ClaimInstruction {
  const { state, reservePda, ticketAccount, transferSolTo, clock } = accounts

  const [data] = claimStruct.serialize({
    instructionDiscriminator: claimInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: state,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: reservePda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: ticketAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: transferSolTo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: clock,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix: ClaimInstruction = new web3.TransactionInstruction({
    programId: new web3.PublicKey('NONE'),
    keys,
    data,
  })
  return ix
}
