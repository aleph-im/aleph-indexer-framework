/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Claim
 * @category generated
 */
export const claimStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ClaimInstructionArgs',
)
/**
 * Accounts required by the _claim_ instruction
 *
 * @property [_writable_] state
 * @property [_writable_] reservePda
 * @property [_writable_] ticketAccount
 * @property [_writable_] transferSolTo
 * @property [] clock
 * @category Instructions
 * @category Claim
 * @category generated
 */
export type ClaimInstructionAccounts = {
  state: web3.PublicKey
  reservePda: web3.PublicKey
  ticketAccount: web3.PublicKey
  transferSolTo: web3.PublicKey
  clock: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const claimInstructionDiscriminator = [
  62, 198, 214, 193, 213, 159, 108, 210,
]

/**
 * Creates a _Claim_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category Claim
 * @category generated
 */
export function createClaimInstruction(
  accounts: ClaimInstructionAccounts,
  programId = new web3.PublicKey('MarBmsSgKXdrN1egZf5sqe1TMai9K1rChYNDJgjq7aD'),
) {
  const [data] = claimStruct.serialize({
    instructionDiscriminator: claimInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.state,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.reservePda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.ticketAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.transferSolTo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.clock,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
