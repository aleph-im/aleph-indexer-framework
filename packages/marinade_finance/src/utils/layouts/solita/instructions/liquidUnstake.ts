/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category LiquidUnstake
 * @category generated
 */
export type LiquidUnstakeInstructionArgs = {
  msolAmount: beet.bignum
}
/**
 * @category Instructions
 * @category LiquidUnstake
 * @category generated
 */
export const liquidUnstakeStruct = new beet.BeetArgsStruct<
  LiquidUnstakeInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['msolAmount', beet.u64],
  ],
  'LiquidUnstakeInstructionArgs',
)
/**
 * Accounts required by the _liquidUnstake_ instruction
 *
 * @property [_writable_] state
 * @property [_writable_] msolMint
 * @property [_writable_] liqPoolSolLegPda
 * @property [_writable_] liqPoolMsolLeg
 * @property [_writable_] treasuryMsolAccount
 * @property [_writable_] getMsolFrom
 * @property [**signer**] getMsolFromAuthority
 * @property [_writable_] transferSolTo
 * @category Instructions
 * @category LiquidUnstake
 * @category generated
 */
export type LiquidUnstakeInstructionAccounts = {
  state: web3.PublicKey
  msolMint: web3.PublicKey
  liqPoolSolLegPda: web3.PublicKey
  liqPoolMsolLeg: web3.PublicKey
  treasuryMsolAccount: web3.PublicKey
  getMsolFrom: web3.PublicKey
  getMsolFromAuthority: web3.PublicKey
  transferSolTo: web3.PublicKey
}

export const LiquidUnstakeAccounts = [
  'state',
  'msolMint',
  'liqPoolSolLegPda',
  'liqPoolMsolLeg',
  'treasuryMsolAccount',
  'getMsolFrom',
  'getMsolFromAuthority',
  'transferSolTo',
]

export const liquidUnstakeInstructionDiscriminator = [
  30, 30, 119, 240, 191, 227, 12, 16,
]

export type LiquidUnstakeInstruction = {
  programId: web3.PublicKey
  keys: web3.AccountMeta[]
  data: Buffer
}

/**
 * Creates a _LiquidUnstake_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category LiquidUnstake
 * @category generated
 */
export function createLiquidUnstakeInstruction(
  accounts: LiquidUnstakeInstructionAccounts,
  args: LiquidUnstakeInstructionArgs,
): LiquidUnstakeInstruction {
  const {
    state,
    msolMint,
    liqPoolSolLegPda,
    liqPoolMsolLeg,
    treasuryMsolAccount,
    getMsolFrom,
    getMsolFromAuthority,
    transferSolTo,
  } = accounts

  const [data] = liquidUnstakeStruct.serialize({
    instructionDiscriminator: liquidUnstakeInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: state,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: msolMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: liqPoolSolLegPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: liqPoolMsolLeg,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: treasuryMsolAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: getMsolFrom,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: getMsolFromAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: transferSolTo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix: LiquidUnstakeInstruction = new web3.TransactionInstruction({
    programId: new web3.PublicKey('NONE'),
    keys,
    data,
  })
  return ix
}
