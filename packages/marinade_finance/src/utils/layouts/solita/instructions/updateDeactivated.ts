/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category UpdateDeactivated
 * @category generated
 */
export type UpdateDeactivatedInstructionArgs = {
  stakeIndex: number
}
/**
 * @category Instructions
 * @category UpdateDeactivated
 * @category generated
 */
export const updateDeactivatedStruct = new beet.BeetArgsStruct<
  UpdateDeactivatedInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['stakeIndex', beet.u32],
  ],
  'UpdateDeactivatedInstructionArgs',
)
/**
 * Accounts required by the _updateDeactivated_ instruction
 *
 * @property [_writable_] stateCommonCommon
 * @property [_writable_] stakeListCommonCommon
 * @property [_writable_] stakeAccountCommonCommon
 * @property [] stakeWithdrawAuthorityCommonCommon
 * @property [_writable_] reservePdaCommonCommon
 * @property [_writable_] msolMintCommonCommon
 * @property [] msolMintAuthorityCommonCommon
 * @property [_writable_] treasuryMsolAccountCommonCommon
 * @property [] clockCommonCommon
 * @property [] stakeHistoryCommonCommon
 * @property [] stakeProgramCommonCommon
 * @property [] tokenProgramCommonCommon
 * @property [_writable_] operationalSolAccount
 * @category Instructions
 * @category UpdateDeactivated
 * @category generated
 */
export type UpdateDeactivatedInstructionAccounts = {
  stateCommonCommon: web3.PublicKey
  stakeListCommonCommon: web3.PublicKey
  stakeAccountCommonCommon: web3.PublicKey
  stakeWithdrawAuthorityCommonCommon: web3.PublicKey
  reservePdaCommonCommon: web3.PublicKey
  msolMintCommonCommon: web3.PublicKey
  msolMintAuthorityCommonCommon: web3.PublicKey
  treasuryMsolAccountCommonCommon: web3.PublicKey
  clockCommonCommon: web3.PublicKey
  stakeHistoryCommonCommon: web3.PublicKey
  stakeProgramCommonCommon: web3.PublicKey
  tokenProgramCommonCommon: web3.PublicKey
  operationalSolAccount: web3.PublicKey
}

export const UpdateDeactivatedAccounts = [
  'stateCommonCommon',
  'stakeListCommonCommon',
  'stakeAccountCommonCommon',
  'stakeWithdrawAuthorityCommonCommon',
  'reservePdaCommonCommon',
  'msolMintCommonCommon',
  'msolMintAuthorityCommonCommon',
  'treasuryMsolAccountCommonCommon',
  'clockCommonCommon',
  'stakeHistoryCommonCommon',
  'stakeProgramCommonCommon',
  'tokenProgramCommonCommon',
  'operationalSolAccount',
]

export const updateDeactivatedInstructionDiscriminator = [
  16, 232, 131, 115, 156, 100, 239, 50,
]

export type UpdateDeactivatedInstruction = {
  programId: web3.PublicKey
  keys: web3.AccountMeta[]
  data: Buffer
}

/**
 * Creates a _UpdateDeactivated_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateDeactivated
 * @category generated
 */
export function createUpdateDeactivatedInstruction(
  accounts: UpdateDeactivatedInstructionAccounts,
  args: UpdateDeactivatedInstructionArgs,
): UpdateDeactivatedInstruction {
  const {
    stateCommonCommon,
    stakeListCommonCommon,
    stakeAccountCommonCommon,
    stakeWithdrawAuthorityCommonCommon,
    reservePdaCommonCommon,
    msolMintCommonCommon,
    msolMintAuthorityCommonCommon,
    treasuryMsolAccountCommonCommon,
    clockCommonCommon,
    stakeHistoryCommonCommon,
    stakeProgramCommonCommon,
    tokenProgramCommonCommon,
    operationalSolAccount,
  } = accounts

  const [data] = updateDeactivatedStruct.serialize({
    instructionDiscriminator: updateDeactivatedInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: stateCommonCommon,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: stakeListCommonCommon,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: stakeAccountCommonCommon,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: stakeWithdrawAuthorityCommonCommon,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: reservePdaCommonCommon,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: msolMintCommonCommon,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: msolMintAuthorityCommonCommon,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: treasuryMsolAccountCommonCommon,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: clockCommonCommon,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: stakeHistoryCommonCommon,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: stakeProgramCommonCommon,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: tokenProgramCommonCommon,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: operationalSolAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix: UpdateDeactivatedInstruction = new web3.TransactionInstruction({
    programId: new web3.PublicKey('NONE'),
    keys,
    data,
  })
  return ix
}
