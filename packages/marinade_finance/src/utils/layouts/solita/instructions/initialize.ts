/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { InitializeData, initializeDataBeet } from '../types/InitializeData.js'

/**
 * @category Instructions
 * @category Initialize
 * @category generated
 */
export type InitializeInstructionArgs = {
  data: InitializeData
}
/**
 * @category Instructions
 * @category Initialize
 * @category generated
 */
export const initializeStruct = new beet.BeetArgsStruct<
  InitializeInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['data', initializeDataBeet],
  ],
  'InitializeInstructionArgs',
)
/**
 * Accounts required by the _initialize_ instruction
 *
 * @property [**signer**] creatorAuthority
 * @property [_writable_] state
 * @property [] reservePda
 * @property [_writable_] stakeList
 * @property [_writable_] validatorList
 * @property [] msolMint
 * @property [] operationalSolAccount
 * @property [] lpMintLiqPoolLiqPool
 * @property [] solLegPdaLiqPoolLiqPool
 * @property [] msolLegLiqPoolLiqPool
 * @property [] treasuryMsolAccount
 * @property [] clock
 * @category Instructions
 * @category Initialize
 * @category generated
 */
export type InitializeInstructionAccounts = {
  creatorAuthority: web3.PublicKey
  state: web3.PublicKey
  reservePda: web3.PublicKey
  stakeList: web3.PublicKey
  validatorList: web3.PublicKey
  msolMint: web3.PublicKey
  operationalSolAccount: web3.PublicKey
  lpMintLiqPoolLiqPool: web3.PublicKey
  solLegPdaLiqPoolLiqPool: web3.PublicKey
  msolLegLiqPoolLiqPool: web3.PublicKey
  treasuryMsolAccount: web3.PublicKey
  clock: web3.PublicKey
}

export const InitializeAccounts = [
  'creatorAuthority',
  'state',
  'reservePda',
  'stakeList',
  'validatorList',
  'msolMint',
  'operationalSolAccount',
  'lpMintLiqPoolLiqPool',
  'solLegPdaLiqPoolLiqPool',
  'msolLegLiqPoolLiqPool',
  'treasuryMsolAccount',
  'clock',
]

export const initializeInstructionDiscriminator = [
  175, 175, 109, 31, 13, 152, 155, 237,
]

export type InitializeInstruction = {
  programId: web3.PublicKey
  keys: web3.AccountMeta[]
  data: Buffer
}

/**
 * Creates a _Initialize_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Initialize
 * @category generated
 */
export function createInitializeInstruction(
  accounts: InitializeInstructionAccounts,
  args: InitializeInstructionArgs,
): InitializeInstruction {
  const {
    creatorAuthority,
    state,
    reservePda,
    stakeList,
    validatorList,
    msolMint,
    operationalSolAccount,
    lpMintLiqPoolLiqPool,
    solLegPdaLiqPoolLiqPool,
    msolLegLiqPoolLiqPool,
    treasuryMsolAccount,
    clock,
  } = accounts

  const [data] = initializeStruct.serialize({
    instructionDiscriminator: initializeInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: creatorAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: state,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: reservePda,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: stakeList,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: validatorList,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: msolMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: operationalSolAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: lpMintLiqPoolLiqPool,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: solLegPdaLiqPoolLiqPool,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: msolLegLiqPoolLiqPool,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: treasuryMsolAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: clock,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix: InitializeInstruction = new web3.TransactionInstruction({
    programId: new web3.PublicKey('NONE'),
    keys,
    data,
  })
  return ix
}
