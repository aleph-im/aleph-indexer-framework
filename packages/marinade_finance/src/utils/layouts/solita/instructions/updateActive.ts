/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category UpdateActive
 * @category generated
 */
export type UpdateActiveInstructionArgs = {
  stakeIndex: number
  validatorIndex: number
}
/**
 * @category Instructions
 * @category UpdateActive
 * @category generated
 */
export const updateActiveStruct = new beet.BeetArgsStruct<
  UpdateActiveInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['stakeIndex', beet.u32],
    ['validatorIndex', beet.u32],
  ],
  'UpdateActiveInstructionArgs',
)
/**
 * Accounts required by the _updateActive_ instruction
 *
 * @property [_writable_] commonItemState
 * @property [_writable_] commonItemStakeList
 * @property [_writable_] commonItemStakeAccount
 * @property [] commonItemStakeWithdrawAuthority
 * @property [_writable_] commonItemReservePda
 * @property [_writable_] commonItemMsolMint
 * @property [] commonItemMsolMintAuthority
 * @property [_writable_] commonItemTreasuryMsolAccount
 * @property [] commonItemClock
 * @property [] commonItemStakeHistory
 * @property [] commonItemStakeProgram
 * @property [] commonItemTokenProgram
 * @property [_writable_] validatorList
 * @category Instructions
 * @category UpdateActive
 * @category generated
 */
export type UpdateActiveInstructionAccounts = {
  commonItemState: web3.PublicKey
  commonItemStakeList: web3.PublicKey
  commonItemStakeAccount: web3.PublicKey
  commonItemStakeWithdrawAuthority: web3.PublicKey
  commonItemReservePda: web3.PublicKey
  commonItemMsolMint: web3.PublicKey
  commonItemMsolMintAuthority: web3.PublicKey
  commonItemTreasuryMsolAccount: web3.PublicKey
  commonItemClock: web3.PublicKey
  commonItemStakeHistory: web3.PublicKey
  commonItemStakeProgram: web3.PublicKey
  commonItemTokenProgram: web3.PublicKey
  validatorList: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const updateActiveInstructionDiscriminator = [
  4, 67, 81, 64, 136, 245, 93, 152,
]

/**
 * Creates a _UpdateActive_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateActive
 * @category generated
 */
export function createUpdateActiveInstruction(
  accounts: UpdateActiveInstructionAccounts,
  args: UpdateActiveInstructionArgs,
  programId = new web3.PublicKey('MarBmsSgKXdrN1egZf5sqe1TMai9K1rChYNDJgjq7aD'),
) {
  const [data] = updateActiveStruct.serialize({
    instructionDiscriminator: updateActiveInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.commonItemState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.commonItemStakeList,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.commonItemStakeAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.commonItemStakeWithdrawAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.commonItemReservePda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.commonItemMsolMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.commonItemMsolMintAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.commonItemTreasuryMsolAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.commonItemClock,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.commonItemStakeHistory,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.commonItemStakeProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.commonItemTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.validatorList,
      isWritable: true,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
