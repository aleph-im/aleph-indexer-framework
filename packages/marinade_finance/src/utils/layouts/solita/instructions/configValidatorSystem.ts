/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ConfigValidatorSystem
 * @category generated
 */
export type ConfigValidatorSystemInstructionArgs = {
  extraRuns: number
}
/**
 * @category Instructions
 * @category ConfigValidatorSystem
 * @category generated
 */
export const configValidatorSystemStruct = new beet.BeetArgsStruct<
  ConfigValidatorSystemInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['extraRuns', beet.u32],
  ],
  'ConfigValidatorSystemInstructionArgs',
)
/**
 * Accounts required by the _configValidatorSystem_ instruction
 *
 * @property [_writable_] state
 * @property [**signer**] managerAuthority
 * @category Instructions
 * @category ConfigValidatorSystem
 * @category generated
 */
export type ConfigValidatorSystemInstructionAccounts = {
  state: web3.PublicKey
  managerAuthority: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const configValidatorSystemInstructionDiscriminator = [
  27, 90, 97, 209, 17, 115, 7, 40,
]

/**
 * Creates a _ConfigValidatorSystem_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ConfigValidatorSystem
 * @category generated
 */
export function createConfigValidatorSystemInstruction(
  accounts: ConfigValidatorSystemInstructionAccounts,
  args: ConfigValidatorSystemInstructionArgs,
  programId = new web3.PublicKey('MarBmsSgKXdrN1egZf5sqe1TMai9K1rChYNDJgjq7aD'),
) {
  const [data] = configValidatorSystemStruct.serialize({
    instructionDiscriminator: configValidatorSystemInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.state,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.managerAuthority,
      isWritable: false,
      isSigner: true,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
