/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Deposit
 * @category generated
 */
export type DepositInstructionArgs = {
  lamports: beet.bignum
}
/**
 * @category Instructions
 * @category Deposit
 * @category generated
 */
export const depositStruct = new beet.BeetArgsStruct<
  DepositInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['lamports', beet.u64],
  ],
  'DepositInstructionArgs',
)
/**
 * Accounts required by the _deposit_ instruction
 *
 * @property [_writable_] state
 * @property [_writable_] msolMint
 * @property [_writable_] liqPoolSolLegPda
 * @property [_writable_] liqPoolMsolLeg
 * @property [] liqPoolMsolLegAuthority
 * @property [_writable_] reservePda
 * @property [_writable_, **signer**] transferFrom
 * @property [_writable_] mintTo
 * @property [] msolMintAuthority
 * @category Instructions
 * @category Deposit
 * @category generated
 */
export type DepositInstructionAccounts = {
  state: web3.PublicKey
  msolMint: web3.PublicKey
  liqPoolSolLegPda: web3.PublicKey
  liqPoolMsolLeg: web3.PublicKey
  liqPoolMsolLegAuthority: web3.PublicKey
  reservePda: web3.PublicKey
  transferFrom: web3.PublicKey
  mintTo: web3.PublicKey
  msolMintAuthority: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const depositInstructionDiscriminator = [
  242, 35, 198, 137, 82, 225, 242, 182,
]

/**
 * Creates a _Deposit_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Deposit
 * @category generated
 */
export function createDepositInstruction(
  accounts: DepositInstructionAccounts,
  args: DepositInstructionArgs,
  programId = new web3.PublicKey('MarBmsSgKXdrN1egZf5sqe1TMai9K1rChYNDJgjq7aD'),
) {
  const [data] = depositStruct.serialize({
    instructionDiscriminator: depositInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.state,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.msolMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.liqPoolSolLegPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.liqPoolMsolLeg,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.liqPoolMsolLegAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.reservePda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.transferFrom,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.mintTo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.msolMintAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
