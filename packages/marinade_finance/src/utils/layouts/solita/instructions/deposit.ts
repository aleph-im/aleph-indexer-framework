/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Deposit
 * @category generated
 */
export type DepositInstructionArgs = {
  lamports: beet.bignum
}
/**
 * @category Instructions
 * @category Deposit
 * @category generated
 */
export const depositStruct = new beet.BeetArgsStruct<
  DepositInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['lamports', beet.u64],
  ],
  'DepositInstructionArgs',
)
/**
 * Accounts required by the _deposit_ instruction
 *
 * @property [_writable_] state
 * @property [_writable_] msolMint
 * @property [_writable_] liqPoolSolLegPda
 * @property [_writable_] liqPoolMsolLeg
 * @property [] liqPoolMsolLegAuthority
 * @property [_writable_] reservePda
 * @property [_writable_, **signer**] transferFrom
 * @property [_writable_] mintTo
 * @property [] msolMintAuthority
 * @category Instructions
 * @category Deposit
 * @category generated
 */
export type DepositInstructionAccounts = {
  state: web3.PublicKey
  msolMint: web3.PublicKey
  liqPoolSolLegPda: web3.PublicKey
  liqPoolMsolLeg: web3.PublicKey
  liqPoolMsolLegAuthority: web3.PublicKey
  reservePda: web3.PublicKey
  transferFrom: web3.PublicKey
  mintTo: web3.PublicKey
  msolMintAuthority: web3.PublicKey
}

export const DepositAccounts = [
  'state',
  'msolMint',
  'liqPoolSolLegPda',
  'liqPoolMsolLeg',
  'liqPoolMsolLegAuthority',
  'reservePda',
  'transferFrom',
  'mintTo',
  'msolMintAuthority',
]

export const depositInstructionDiscriminator = [
  242, 35, 198, 137, 82, 225, 242, 182,
]

export type DepositInstruction = {
  programId: web3.PublicKey
  keys: web3.AccountMeta[]
  data: Buffer
}

/**
 * Creates a _Deposit_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Deposit
 * @category generated
 */
export function createDepositInstruction(
  accounts: DepositInstructionAccounts,
  args: DepositInstructionArgs,
): DepositInstruction {
  const {
    state,
    msolMint,
    liqPoolSolLegPda,
    liqPoolMsolLeg,
    liqPoolMsolLegAuthority,
    reservePda,
    transferFrom,
    mintTo,
    msolMintAuthority,
  } = accounts

  const [data] = depositStruct.serialize({
    instructionDiscriminator: depositInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: state,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: msolMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: liqPoolSolLegPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: liqPoolMsolLeg,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: liqPoolMsolLegAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: reservePda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: transferFrom,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: mintTo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: msolMintAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix: DepositInstruction = new web3.TransactionInstruction({
    programId: new web3.PublicKey('NONE'),
    keys,
    data,
  })
  return ix
}
