/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RemoveLiquidity
 * @category generated
 */
export type RemoveLiquidityInstructionArgs = {
  tokens: beet.bignum
}
/**
 * @category Instructions
 * @category RemoveLiquidity
 * @category generated
 */
export const removeLiquidityStruct = new beet.BeetArgsStruct<
  RemoveLiquidityInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['tokens', beet.u64],
  ],
  'RemoveLiquidityInstructionArgs',
)
/**
 * Accounts required by the _removeLiquidity_ instruction
 *
 * @property [_writable_] state
 * @property [_writable_] lpMint
 * @property [_writable_] burnFrom
 * @property [**signer**] burnFromAuthority
 * @property [_writable_] transferSolTo
 * @property [_writable_] transferMsolTo
 * @property [_writable_] liqPoolSolLegPda
 * @property [_writable_] liqPoolMsolLeg
 * @property [] liqPoolMsolLegAuthority
 * @category Instructions
 * @category RemoveLiquidity
 * @category generated
 */
export type RemoveLiquidityInstructionAccounts = {
  state: web3.PublicKey
  lpMint: web3.PublicKey
  burnFrom: web3.PublicKey
  burnFromAuthority: web3.PublicKey
  transferSolTo: web3.PublicKey
  transferMsolTo: web3.PublicKey
  liqPoolSolLegPda: web3.PublicKey
  liqPoolMsolLeg: web3.PublicKey
  liqPoolMsolLegAuthority: web3.PublicKey
}

export const RemoveLiquidityAccounts = [
  'state',
  'lpMint',
  'burnFrom',
  'burnFromAuthority',
  'transferSolTo',
  'transferMsolTo',
  'liqPoolSolLegPda',
  'liqPoolMsolLeg',
  'liqPoolMsolLegAuthority',
]

export const removeLiquidityInstructionDiscriminator = [
  80, 85, 209, 72, 24, 206, 177, 108,
]

export type RemoveLiquidityInstruction = {
  programId: web3.PublicKey
  keys: web3.AccountMeta[]
  data: Buffer
}

/**
 * Creates a _RemoveLiquidity_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RemoveLiquidity
 * @category generated
 */
export function createRemoveLiquidityInstruction(
  accounts: RemoveLiquidityInstructionAccounts,
  args: RemoveLiquidityInstructionArgs,
): RemoveLiquidityInstruction {
  const {
    state,
    lpMint,
    burnFrom,
    burnFromAuthority,
    transferSolTo,
    transferMsolTo,
    liqPoolSolLegPda,
    liqPoolMsolLeg,
    liqPoolMsolLegAuthority,
  } = accounts

  const [data] = removeLiquidityStruct.serialize({
    instructionDiscriminator: removeLiquidityInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: state,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: lpMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: burnFrom,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: burnFromAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: transferSolTo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: transferMsolTo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: liqPoolSolLegPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: liqPoolMsolLeg,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: liqPoolMsolLegAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix: RemoveLiquidityInstruction = new web3.TransactionInstruction({
    programId: new web3.PublicKey('NONE'),
    keys,
    data,
  })
  return ix
}
