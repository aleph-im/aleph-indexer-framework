/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category RemoveLiquidity
 * @category generated
 */
export type RemoveLiquidityInstructionArgs = {
  tokens: beet.bignum
}
/**
 * @category Instructions
 * @category RemoveLiquidity
 * @category generated
 */
export const removeLiquidityStruct = new beet.BeetArgsStruct<
  RemoveLiquidityInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['tokens', beet.u64],
  ],
  'RemoveLiquidityInstructionArgs',
)
/**
 * Accounts required by the _removeLiquidity_ instruction
 *
 * @property [_writable_] state
 * @property [_writable_] lpMint
 * @property [_writable_] burnFrom
 * @property [**signer**] burnFromAuthority
 * @property [_writable_] transferSolTo
 * @property [_writable_] transferMsolTo
 * @property [_writable_] liqPoolSolLegPda
 * @property [_writable_] liqPoolMsolLeg
 * @property [] liqPoolMsolLegAuthority
 * @category Instructions
 * @category RemoveLiquidity
 * @category generated
 */
export type RemoveLiquidityInstructionAccounts = {
  state: web3.PublicKey
  lpMint: web3.PublicKey
  burnFrom: web3.PublicKey
  burnFromAuthority: web3.PublicKey
  transferSolTo: web3.PublicKey
  transferMsolTo: web3.PublicKey
  liqPoolSolLegPda: web3.PublicKey
  liqPoolMsolLeg: web3.PublicKey
  liqPoolMsolLegAuthority: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const removeLiquidityInstructionDiscriminator = [
  80, 85, 209, 72, 24, 206, 177, 108,
]

/**
 * Creates a _RemoveLiquidity_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RemoveLiquidity
 * @category generated
 */
export function createRemoveLiquidityInstruction(
  accounts: RemoveLiquidityInstructionAccounts,
  args: RemoveLiquidityInstructionArgs,
  programId = new web3.PublicKey('MarBmsSgKXdrN1egZf5sqe1TMai9K1rChYNDJgjq7aD'),
) {
  const [data] = removeLiquidityStruct.serialize({
    instructionDiscriminator: removeLiquidityInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.state,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lpMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.burnFrom,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.burnFromAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.transferSolTo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.transferMsolTo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.liqPoolSolLegPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.liqPoolMsolLeg,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.liqPoolMsolLegAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
